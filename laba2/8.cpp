//Задание 8. Написать программу, иллюстрирующую тот факт, что
//1) опция firstprivate позволяет инициализировать локальные для потоков
//переменные в параллельной области значением одноименной переменной, созданной в последовательной области до входа в параллельную; 2)
//значение одноименной переменной, созданной в последовательной области, не зависит от значений локальных переменных в параллельной области и сохраняется при выходе из параллельной области.

#include <stdio.h>
#include <omp.h>
#include <locale.h>
int main(int argc, char* argv[])
{
	setlocale(LC_ALL, ".ACP");
	int n = 1;
	printf("Значение n в начале: %d\n", n);
#pragma omp parallel num_threads(4) firstprivate(n)
	{
		printf("Значение n в потоке (на входе): %d\n", n);
		/* Присвоим переменной n номер текущей нити */
		n = omp_get_thread_num();
		printf("Значение n в потоке (на выходе): %d\n", n);
	}
	printf("Значение n в конце: %d\n", n);
}
