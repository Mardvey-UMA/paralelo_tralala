#include "mpi.h"       
#include <iostream>    

using namespace std;   

int main(int argc, char **argv) {
    double a = 0, b = 0, c = 0;  // a - отправляемые данные, b и c - получаемые
    
    MPI_Init(NULL, NULL);
    
    int Size;
    MPI_Comm_size(MPI_COMM_WORLD, &Size);
    
    // Получение ранга процесса
    int Rank;  // Уникальный идентификатор процесса (от 0 до Size-1)
    MPI_Comm_rank(MPI_COMM_WORLD, &Rank);
    
    // Вычисление номеров соседних процессов в кольцевой топологии
    int Next = (Rank + 1) % Size;     // Следующий процесс в кольце
    int Prev = (Rank - 1 + Size) % Size;  // Предыдущий процесс в кольце
    //% Size обеспечивает замыкание в кольцо
    
    // Подготовка данных для отправки
    a = Rank + 0.7;  // Каждый процесс отправляет свой ранг + 0.7
    
    // Первый обмен данными: отправка вправо, приём слева
    MPI_Sendrecv(
        &a,                // Указатель на отправляемые данные
        1,                 // Количество элементов
        MPI_DOUBLE,        // Тип данных
        Next,              // Ранг процесса-получателя
        5,                 // Тег сообщения
        &b,                // Указатель на буфер для приёма
        1,                 // Количество ожидаемых элементов
        MPI_DOUBLE,        // Тип ожидаемых данных
        Prev,              // Ранг процесса-отправителя
        5,                 // Тег ожидаемого сообщения 
        MPI_COMM_WORLD,    // Коммуникатор
        MPI_STATUS_IGNORE  
    );
    
    // Второй обмен данными: отправка влево, приём справа
    MPI_Sendrecv(
        &a,                
        1, 
        MPI_DOUBLE,
        Prev,              // отправляем предыдущему процессу
        5,
        &c,                // Принимаем данные в переменную c
        1,
        MPI_DOUBLE,
        Next,              // Ожидаем данные от следующего процесса
        5,
        MPI_COMM_WORLD,
        MPI_STATUS_IGNORE
    );
    
    cout << "Process " << Rank << ": a=" << a << " b=" << b << " c=" << c << endl;
    
    MPI_Finalize();
    
    return 0;
}